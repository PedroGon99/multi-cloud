{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pedro\\\\Documents\\\\Universidade\\\\5\\xBA ano\\\\2 Semestre\\\\SPD\\\\Trabalho Multi-Cloud\\\\multi-cloud\\\\projeto_final\\\\client\\\\src\\\\components\\\\singlePost\\\\SinglePost.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport axios from \"axios\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { Context } from \"../../context/Context\";\nimport \"./singlePost.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SinglePost() {\n  _s();\n  const location = useLocation();\n  const path = location.pathname.split(\"/\")[2]; //pathname of a post== \"/post/nqjdqwne3e13213\" as we only want the id we have to do a split \n  const [post, setPost] = useState({});\n  const {\n    user\n  } = useContext(Context);\n  //The initial state for the title and desc it will be an empty string\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false);\n\n  //Fetch de data using the post_id\n  //It must be an async function due to otherwise it will return a promise\n  useEffect(() => {\n    const getPost = async () => {\n      const res = await axios.get(\"/posts/\" + path);\n      setPost(res.data);\n      setTitle(res.data.title);\n      setDesc(res.data.desc);\n    };\n    getPost();\n  }, [path]);\n\n  //Through the post_id the post will be deleted and the user will be redirected to the homepage.\n  //Only the author of a post is able delete it.\n  const handleDelete = async () => {\n    try {\n      await axios.delete(`/posts/${post._id}`, {\n        data: {\n          username: user.username\n        }\n      });\n      window.location.replace(\"/\");\n    } catch (err) {}\n  };\n\n  //Through the post_id the post will be edited and the user will be redirected to the homepage.\n  //Only the author of a post is able to edit it.\n  const handleUpdate = async () => {\n    try {\n      await axios.put(`/posts/${post._id}`, {\n        username: user.username,\n        title,\n        desc\n      });\n      //Update done\n      setUpdateMode(false);\n    } catch (err) {}\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"singlePost\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"singlePostWrapper\",\n      children: [updateMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        className: \"singlePostTitleInput\",\n        autoFocus: true,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"singlePostTitle\",\n        children: [title, post.username === (user === null || user === void 0 ? void 0 : user.username) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"singlePostEdit\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singlePostIcon far fa-edit\",\n            onClick: () => setUpdateMode(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singlePostIcon far fa-trash-alt\",\n            onClick: handleDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"singlePostInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"singlePostAuthor\",\n          children: [\"Author:\", /*#__PURE__*/_jsxDEV(Link, {\n            to: `/?user=${post.username}`,\n            className: \"link\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\" \", post.username]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"singlePostDate\",\n          children: new Date(post.createdAt).toDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"singlePostDescInput\",\n        value: desc,\n        onChange: e => setDesc(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"singlePostDesc\",\n        children: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), updateMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"singlePostButton\",\n        onClick: handleUpdate,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(SinglePost, \"xs7JL4oKuIn8mxMMLFGIhzF2qFM=\", false, function () {\n  return [useLocation];\n});\n_c = SinglePost;\nvar _c;\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"names":["React","axios","useContext","useEffect","useState","useLocation","Link","Context","SinglePost","location","path","pathname","split","post","setPost","user","title","setTitle","desc","setDesc","updateMode","setUpdateMode","getPost","res","get","data","handleDelete","delete","_id","username","window","replace","err","handleUpdate","put","e","target","value","Date","createdAt","toDateString"],"sources":["C:/Users/Pedro/Documents/Universidade/5ยบ ano/2 Semestre/SPD/Trabalho Multi-Cloud/multi-cloud/projeto_final/client/src/components/singlePost/SinglePost.jsx"],"sourcesContent":["import React from 'react';\r\nimport axios from \"axios\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Context } from \"../../context/Context\";\r\nimport \"./singlePost.css\";\r\n\r\nexport default function SinglePost() {\r\n  const location = useLocation();\r\n  const path = location.pathname.split(\"/\")[2];//pathname of a post== \"/post/nqjdqwne3e13213\" as we only want the id we have to do a split \r\n  const [post, setPost] = useState({});\r\n  const { user } = useContext(Context);\r\n  //The initial state for the title and desc it will be an empty string\r\n  const [title, setTitle] = useState(\"\");\r\n  const [desc, setDesc] = useState(\"\");\r\n  const [updateMode, setUpdateMode] = useState(false);\r\n\r\n  //Fetch de data using the post_id\r\n  //It must be an async function due to otherwise it will return a promise\r\n  useEffect(() => {\r\n    const getPost = async () => {\r\n      const res = await axios.get(\"/posts/\" + path);\r\n      setPost(res.data);\r\n      setTitle(res.data.title);\r\n      setDesc(res.data.desc);\r\n    };\r\n    getPost();\r\n  }, [path]);\r\n\r\n\r\n  //Through the post_id the post will be deleted and the user will be redirected to the homepage.\r\n  //Only the author of a post is able delete it.\r\n  const handleDelete = async () => {\r\n    try {\r\n      await axios.delete(`/posts/${post._id}`, {\r\n        data: { username: user.username },\r\n      });\r\n      window.location.replace(\"/\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  //Through the post_id the post will be edited and the user will be redirected to the homepage.\r\n  //Only the author of a post is able to edit it.\r\n  const handleUpdate = async () => {\r\n    try {\r\n      await axios.put(`/posts/${post._id}`, {\r\n        username: user.username,\r\n        title,\r\n        desc,\r\n      });\r\n      //Update done\r\n      setUpdateMode(false)\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <div className=\"singlePost\">\r\n      <div className=\"singlePostWrapper\">\r\n        {updateMode ? (\r\n          <input\r\n            type=\"text\"\r\n            value={title}\r\n            className=\"singlePostTitleInput\"\r\n            autoFocus\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        ) : (\r\n          <h1 className=\"singlePostTitle\">\r\n            {title}\r\n            {post.username === user?.username && (\r\n              <div className=\"singlePostEdit\">\r\n                <i\r\n                  className=\"singlePostIcon far fa-edit\"\r\n                  onClick={() => setUpdateMode(true)}\r\n                ></i>\r\n                <i\r\n                  className=\"singlePostIcon far fa-trash-alt\"\r\n                  onClick={handleDelete}\r\n                ></i>\r\n              </div>\r\n            )}\r\n          </h1>\r\n        )}\r\n        <div className=\"singlePostInfo\">\r\n          <span className=\"singlePostAuthor\">\r\n            Author:\r\n            <Link to={`/?user=${post.username}`} className=\"link\">\r\n              <b> {post.username}</b>\r\n            </Link>\r\n          </span>\r\n          <span className=\"singlePostDate\">\r\n            {new Date(post.createdAt).toDateString()}\r\n          </span>\r\n        </div>\r\n        {updateMode ? (\r\n          <textarea\r\n            className=\"singlePostDescInput\"\r\n            value={desc}\r\n            onChange={(e) => setDesc(e.target.value)}\r\n          />\r\n        ) : (\r\n          <p className=\"singlePostDesc\">{desc}</p>\r\n        )}\r\n        {updateMode && (\r\n          <button className=\"singlePostButton\" onClick={handleUpdate}>\r\n            Update\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}